trigger: 
- main

variables:
  subscription: AzureForStudentsConnection
  resourceGroup: tap-app-1-aks-d
  storageAccount: tapapp1std
  container: tfstate
  anyTfChanges: false
  tfstateFile: app-1-aks-d.tfstate
  artifactName: 'variables' 
  # productRequester : '${{ Build.QueuedBy }}'
  productVersion: '$(GitVersion.SemVer)'
  

pool:
  name: 'Default'

steps:
  # Disable shallow cloning
  - checkout: self
    fetchDepth: 0 
 
  - task: gitversion/execute@3
    inputs:
      azureSubscription: AzureForStudentsConnection
      useConfigFile: true 
      configFilePath: './GitVersion.yml'
  - script: echo current version is $(productVersion) 
    displayName: 'Display calculated version' 
    
  - task: Bash@3 
    inputs: 
      targetType: inline 
      script: echo "##vso[build.updatebuildnumber]$(SemVer)" 
    displayName: 'Update build number'
  - task: CopyFiles@2
    displayName: Copy files
    inputs:
      azureSubscription: AzureForStudentsConnection
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: '*.json'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    displayName:  Publish build artifacts
    inputs:
      azureSubscription: AzureForStudentsConnection

      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: '$(artifactName)'

  - task: TerraformInstaller@0
    displayName: install Terraform 
    inputs:
      azureSubscription: AzureForStudentsConnection
      terraformVersion: 'latest'
  - task: TerraformTaskV1@0
    displayName: terraform init
    inputs:
      azureSubscription: AzureForStudentsConnection
      provider: 'azurerm'
      command: 'init'
      workingDirectory: '$(System.DefaultWorkingDirectory)/storage'
      backendServiceArm: '$(subscription)'
      backendAzureRmResourceGroupName: '$(resourceGroup)'
      backendAzureRmStorageAccountName: '$(storageAccount)'
      backendAzureRmContainerName: '$(container)'
      backendAzureRmKey: '$(tfstateFile)'
  - task: TerraformTaskV1@0
    displayName: terraform plan -out=tfplan
    inputs:
      azureSubscription: AzureForStudentsConnection
      provider: 'azurerm'
      command: 'plan'
      workingDirectory: '$(System.DefaultWorkingDirectory)/storage'
      commandOptions: '-out=tfplan'
      # commandOptions: '-detailed-exitcode -out=tfplan'
      environmentServiceNameAzureRM: '$(subscription)'
  - task: TerraformTaskV1@0
    displayName: terraform apply tfplan
    condition: eq(variables.anyTfChanges,Â true)
    inputs:
      azureSubscription: AzureForStudentsConnection
      provider: 'azurerm'
      command: 'apply'
      workingDirectory: '$(System.DefaultWorkingDirectory)/storage'
      commandOptions: 'tfplan'
      environmentServiceNameAzureRM: '$(subscription)'

  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        resource_group_tags=$(az group show --name $(azurerm_resource_group.rg.name) --query 'tags' --output json)
               echo "##vso[task.setvariable variable=ResourceGroupTags]$resource_group_tags"